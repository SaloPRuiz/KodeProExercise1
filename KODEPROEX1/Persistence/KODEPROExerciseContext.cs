using KODEPROEX1.Persistence.Models;
using Microsoft.EntityFrameworkCore;

namespace KODEPROEX1.Persistence
{
    // Our DBContext, generated by scaffolding our database using Database-first approach
    public partial class KODEPROExerciseContext : DbContext
    {
        public KODEPROExerciseContext()
        {
        }

        public KODEPROExerciseContext(DbContextOptions<KODEPROExerciseContext> options)
            : base(options)
        {
        }

        // Here we have our tables
        public virtual DbSet<School> Schools { get; set; } = null!;
        public virtual DbSet<Student> Students { get; set; } = null!;

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Server=localhost\\SQLEXPRESS;Database=KODEPROExercise;Trusted_Connection=True;");
            }
        }

        // Here we have the configuration of our tables
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<School>(entity =>
            {
                entity.ToTable("school");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.IdCountry).HasColumnName("id_country");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<Student>(entity =>
            {
                entity.HasKey(e => e.IdentityCard)
                    .HasName("PK__student__4943C3B541821215");

                entity.ToTable("student");

                entity.Property(e => e.IdentityCard)
                    .ValueGeneratedNever()
                    .HasColumnName("identity_card");

                entity.Property(e => e.DateOfBirth)
                    .HasColumnType("date")
                    .HasColumnName("date_of_birth");

                entity.Property(e => e.IdSchool).HasColumnName("id_school");

                entity.Property(e => e.Names)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("names");

                entity.Property(e => e.Surnames)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("surnames");

                entity.HasOne(d => d.IdSchoolNavigation)
                    .WithMany(p => p.Students)
                    .HasForeignKey(d => d.IdSchool)
                    .HasConstraintName("FK__student__id_scho__4BAC3F29");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
